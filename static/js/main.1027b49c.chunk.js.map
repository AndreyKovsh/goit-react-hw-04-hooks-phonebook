{"version":3,"sources":["component/Form/Form.js","component/Filter/Filter.js","component/ContactList/ContactList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","onSubmit","useState","name","setName","number","setNumber","handleChange","event","target","value","resetInput","preventDefault","type","onChange","placeholder","Filter","ContactList","contacts","onDeleteContact","map","id","onClick","App","JSON","parse","localStorage","getItem","setContacts","useEffect","window","setItem","stringify","filter","setFilter","contact","shortid","generate","find","toLowerCase","toast","trim","info","test","prevContacts","sort","a","b","error","length","e","currentTarget","normalizedFilter","includes","getVisibleContacts","contactId","autoClose","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1027b49c.chunk.js","sourcesContent":["import { useState } from 'react';\n\nfunction Form({ onSubmit }) {\n    \n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    \n    const handleChange = event => {\n        const { name, value } = event.target;\n\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default: return;\n        };\n    };\n    \n    const handleSubmit = event => {\n        event.preventDefault();\n        onSubmit(name, number);\n\n        resetInput();\n    };\n    const resetInput = () => {\n    setName('');\n    setNumber('');\n    };\n\n    return (\n      <>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <label>\n              Name\n              <input\n                type=\"text\"\n                name='name'\n                value={name}\n                onChange={handleChange}\n                placeholder=\"Andrey Kovsh\"\n              />\n            </label >\n            <label>\n              Phone number\n              <input\n                type=\"text\"\n                name='number'\n                value={number}\n                onChange={handleChange}\n                placeholder=\"817-18-41\"\n              />\n            </label>\n            <button type='submit'>Add contact</button>\n\n          </div>\n        </form>\n      </>\n    );\n};\n\nexport default Form;\n\n// import React, { Component } from 'react';\n// import PT from 'prop-types';\n// import shortid from 'shortid';\n// import './Form.css';\n\n// class Form extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   nameInputId = shortid.generate();\n//   numberInputId = shortid.generate();\n\n//   handleChange = e => {\n//     const { name, value } = e.currentTarget;\n\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n\n//     this.props.onSubmit(this.state);\n\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <form id=\"contact\" onSubmit={this.handleSubmit}>\n//         <label htmlFor={this.nameInputId}>\n//           Name\n//           <input\n//             className=\"input-field\"\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             onChange={this.handleChange}\n//             id={this.nameInputId}\n//             placeholder=\"Andrey Kovsh\"\n//           />\n//         </label>\n//         <br />\n//         <label htmlFor={this.numberInputId}>\n//           Phone number\n//           <input\n//             className=\"input-field\"\n//             type=\"text\"\n//             name=\"number\"\n//             value={number}\n//             onChange={this.handleChange}\n//             id={this.numberInputId}\n//             placeholder=\"817-18-41\"\n//           />\n//         </label>\n\n//         <button type=\"submit\" className=\"submit-button\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n// Form.propTypes = {\n//   onSubmit: PT.func.isRequired,\n// };\n\n// export default Form;\n","import React from 'react';\nconst Filter = ({ value, onChange }) => (\n    <label>\n    Find contacts by name\n    <input type=\"text\" value={value} onChange={onChange} />\n    </label>\n);\n\nexport default Filter;\n\n\n// import PT from 'prop-types';\n// import './Filter.css';\n\n// const Filter = ({ value, onChange }) => {\n//   return (\n//     <label>\n//       Find contacts by name\n//       <input type=\"text\" value={value} onChange={onChange} />\n//     </label>\n//   );\n// };\n\n// Filter.propTypes = {\n//   value: PT.string,\n//   onChange: PT.func.isRequired,\n// };\n\n// export default Filter;\n","import React from 'react';\nfunction ContactList ({ contacts, onDeleteContact }) {\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id}>\n          <p>\n            <b>{name} </b>\n\n            <em>{number}</em>\n          </p>\n          <button type=\"button\" onClick={() => onDeleteContact(id)}>\n            Удалить\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ContactList;\n\n\n\n// import PT from 'prop-types';\n// import './ContactList.css';\n\n// function ContactList({ contacts, onDeleteContact }) {\n//   return (\n//     <ul className=\"contact-list\">\n//       {contacts.map(({ id, name, number }) => (\n//         <li key={id}>\n//           <p>\n//             {name}: {number}\n//           </p>\n//           <button type=\"button\" onClick={() => onDeleteContact(id)}>\n//             delete\n//           </button>\n//         </li>\n//       ))}\n//     </ul>\n//   );\n// }\n\n// ContactList.propTypes = {\n//   contacts: PT.arrayOf(\n//     PT.shape({\n//       id: PT.string.isRequired,\n//       name: PT.string.isRequired,\n//       number: PT.string.isRequired,\n//     }),\n//   ),\n//   onDeleteContact: PT.func.isRequired,\n// };\n\n// export default ContactList;\n","import { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport shortid from 'shortid';\nimport Form from './component/Form/Form.js';\nimport Filter from './component/Filter/Filter.js';\nimport ContactList from './component/ContactList/ContactList.js';\n\nfunction App() {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(localStorage.getItem('contacts')) ?? [];\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const [filter, setFilter] = useState('');\n\n  const addContact = (name, number) => {\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      toast(` ${name} is already in use.`);\n    } else if (contacts.find(contact => contact.number === number)) {\n      toast(` ${number} is already in use.`);\n    } else if (name.trim() === '' || number.trim() === '') {\n      toast.info(\" Enter the contact's name and  phone number!\");\n    } else if (!/\\d{3}[-]\\d{2}[-]\\d{2}/g.test(number)) {\n      toast.error(' Enter the correct  phone number(check format)!');\n    } else {\n      setContacts(prevContacts =>\n        [contact, ...prevContacts].sort((a, b) => {\n          if (a.name.toLowerCase() > b.name.toLowerCase()) return 1;\n          if (a.name.toLowerCase() < b.name.toLowerCase()) return -1;\n          return 0;\n        }),\n      );\n    }\n  };\n\n  const deleteContact = contactId => {\n    setContacts(contacts.filter(({ id }) => id !== contactId));\n  };\n\n  const changeFilter = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <Form onSubmit={addContact} />\n      <h2>Contacts</h2>\n      {contacts.length > 1 && <Filter value={filter} onChange={changeFilter} />}\n      {contacts.length > 0 ? (\n        <ContactList\n          contacts={getVisibleContacts()}\n          onDeleteContact={deleteContact}\n        />\n      ) : (\n        <p>Your phonebook is empty. Please add contact.</p>\n      )}\n      <ToastContainer autoClose={3700} />\n    </>\n  );\n}\n\nexport default App;\n// import { Component } from 'react';\n// import shortid from 'shortid';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n// import Form from './component/Form/Form.js';\n// import Filter from './component/Filter/Filter.js';\n// import ContactList from './component/ContactList/ContactList.js';\n\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = JSON.parse(contacts);\n\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     const nextContacts = this.state.contacts;\n//     const prevContacts = prevState.contacts;\n\n//     if (nextContacts !== prevContacts) {\n//       localStorage.setItem('contacts', JSON.stringify(nextContacts));\n//     }\n//   }\n\n//   addContact = ({ name, number }) => {\n//     const contact = {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     };\n//     const { contacts } = this.state;\n\n//     if (\n//       contacts.find(\n//         contact => contact.name.toLowerCase() === name.toLowerCase(),\n//       )\n//     ) {\n//       toast(`${name} is already in use`);\n//     } else if (contacts.find(contact => contact.number === number)) {\n//       toast(`${number} is already in use`);\n//     } else if (name.trim() === '' || number.trim() === '') {\n//       toast(\"Enter the contact's name and phone number!\");\n//     } else if (!/\\d{3}[-]\\d{2}[-]\\d{2}/g.test(number)) {\n//       toast('Enter the correct phone number');\n//     } else {\n//       this.setState(({ contacts }) => ({\n//         contacts: [contact, ...contacts],\n//       }));\n//     }\n//   };\n\n//   deleteContact = contactId => {\n//     this.setState(({ contacts }) => ({\n//       contacts: contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n\n//   changeFilter = e => {\n//     this.setState({ filter: e.currentTarget.value });\n//   };\n\n//   getContacts = () => {\n//     const { contacts, filter } = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   };\n\n//   render() {\n//     const { filter, contacts } = this.state;\n//     const visibleContacts = this.getContacts();\n//     return (\n//       <>\n//         <h1>Phonebook</h1>\n//         <Form onSubmit={this.addContact} />\n//         <h2>Contacts</h2>\n//         {contacts.length > 1 && (\n//           <Filter value={filter} onChange={this.changeFilter} />\n//         )}\n//         {contacts.length > 0 ? (\n//           <ContactList\n//             contacts={visibleContacts}\n//             onDeleteContact={this.deleteContact}\n//           />\n//         ) : (\n//           <p>Your phonebook is empty. Please add contact.</p>\n//         )}\n//         <ToastContainer></ToastContainer>\n//       </>\n//     );\n//   }\n// }\n\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}